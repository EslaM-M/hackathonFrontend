{"ast":null,"code":"import moment from \"moment\";\nimport * as Sentry from \"@sentry/browser\";\nimport * as CONSTANTS from \"../utils/constants\"; //to validate the token if expired or not to be used in the api calls headers\n// return true or false valid token\n\nexport const validateToken = () => {\n  const authData = localStorage.getItem(\"auth_data\") && JSON.parse(localStorage.getItem(\"auth_data\"));\n\n  if (!authData || !authData.token) {\n    return false;\n  }\n\n  const isValid = moment(Date.now()).isSameOrBefore(moment(authData.expires_at));\n  return {\n    isValid,\n    authData\n  };\n};\nexport const initializeSentry = userId => {\n  window._env_.NODE_ENV && Sentry.init({\n    dsn: CONSTANTS.SENTRY_DSN,\n    environment: window._env_.NODE_ENV,\n    release: window.SENTRY_RELEASE && window.SENTRY_RELEASE.id\n  });\n  Sentry.configureScope(function (scope) {\n    scope.setUser({\n      \"userId\": userId\n    });\n  });\n};","map":{"version":3,"sources":["/home/eslam/Development/work/gandalf-dashboard/src/store/util.js"],"names":["moment","Sentry","CONSTANTS","validateToken","authData","localStorage","getItem","JSON","parse","token","isValid","Date","now","isSameOrBefore","expires_at","initializeSentry","userId","window","_env_","NODE_ENV","init","dsn","SENTRY_DSN","environment","release","SENTRY_RELEASE","id","configureScope","scope","setUser"],"mappings":"AAAA,OAAOA,MAAP,MAAmB,QAAnB;AACA,OAAO,KAAKC,MAAZ,MAAwB,iBAAxB;AACA,OAAO,KAAKC,SAAZ,MAA2B,oBAA3B,C,CAEA;AACA;;AACA,OAAO,MAAMC,aAAa,GAAG,MAAM;AACjC,QAAMC,QAAQ,GACZC,YAAY,CAACC,OAAb,CAAqB,WAArB,KACAC,IAAI,CAACC,KAAL,CAAWH,YAAY,CAACC,OAAb,CAAqB,WAArB,CAAX,CAFF;;AAGA,MAAI,CAACF,QAAD,IAAa,CAACA,QAAQ,CAACK,KAA3B,EAAkC;AAChC,WAAO,KAAP;AACD;;AAED,QAAMC,OAAO,GAAGV,MAAM,CAACW,IAAI,CAACC,GAAL,EAAD,CAAN,CAAmBC,cAAnB,CACdb,MAAM,CAACI,QAAQ,CAACU,UAAV,CADQ,CAAhB;AAGA,SAAO;AAAEJ,IAAAA,OAAF;AAAWN,IAAAA;AAAX,GAAP;AACD,CAZM;AAcP,OAAO,MAAMW,gBAAgB,GAAIC,MAAD,IAAY;AAC1CC,EAAAA,MAAM,CAACC,KAAP,CAAaC,QAAb,IACElB,MAAM,CAACmB,IAAP,CAAY;AACVC,IAAAA,GAAG,EAAEnB,SAAS,CAACoB,UADL;AAEVC,IAAAA,WAAW,EAAEN,MAAM,CAACC,KAAP,CAAaC,QAFhB;AAGVK,IAAAA,OAAO,EAAEP,MAAM,CAACQ,cAAP,IAAyBR,MAAM,CAACQ,cAAP,CAAsBC;AAH9C,GAAZ,CADF;AAMAzB,EAAAA,MAAM,CAAC0B,cAAP,CAAsB,UAAUC,KAAV,EAAiB;AACrCA,IAAAA,KAAK,CAACC,OAAN,CAAc;AAAE,gBAAUb;AAAZ,KAAd;AACD,GAFD;AAGD,CAVM","sourcesContent":["import moment from \"moment\";\nimport * as Sentry from \"@sentry/browser\";\nimport * as CONSTANTS from \"../utils/constants\";\n\n//to validate the token if expired or not to be used in the api calls headers\n// return true or false valid token\nexport const validateToken = () => {\n  const authData =\n    localStorage.getItem(\"auth_data\") &&\n    JSON.parse(localStorage.getItem(\"auth_data\"));\n  if (!authData || !authData.token) {\n    return false;\n  }\n\n  const isValid = moment(Date.now()).isSameOrBefore(\n    moment(authData.expires_at)\n  );\n  return { isValid, authData };\n};\n\nexport const initializeSentry = (userId) => {\n  window._env_.NODE_ENV &&\n    Sentry.init({\n      dsn: CONSTANTS.SENTRY_DSN,\n      environment: window._env_.NODE_ENV,\n      release: window.SENTRY_RELEASE && window.SENTRY_RELEASE.id\n    });\n  Sentry.configureScope(function (scope) {\n    scope.setUser({ \"userId\": userId });\n  });\n};\n"]},"metadata":{},"sourceType":"module"}